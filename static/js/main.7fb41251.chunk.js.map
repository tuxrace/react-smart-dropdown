{"version":3,"sources":["components/List.js","components/Search.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["List","countries","hasMore","handleClick","handleLoadMore","pageSize","useState","countryData","setCountryData","search","setSearch","useEffect","type","placeholder","onChange","e","target","value","debounce","newCountryData","filter","item","includes","debounced","length","slice","map","country","idx","className","key","onClick","Search","setCountries","open","setOpen","setHasMore","selected","setSelected","setPageSize","a","axios","get","res","countriesData","data","getData","style","visibility","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SA+CeA,EA3CF,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,UAAWC,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,SAAc,EACpCC,mBAAS,IAD2B,mBACnEC,EADmE,KACtDC,EADsD,OAE9CF,mBAAS,IAFqC,mBAEnEG,EAFmE,KAE3DC,EAF2D,KAuB1E,OAJAC,qBAAU,WACNH,EAAeP,KAChB,CAACA,IAGA,6BACI,2BAAOW,KAAK,OAAOC,YAAW,eAAQC,SArBzB,SAACC,GAClB,IAAMN,EAASM,EAAEC,OAAOC,OACxBP,EAAUK,EAAEC,OAAOC,OAEJ,KAAXR,GACkBS,KAAS,WACvB,IAAMC,EAAiBZ,EAAYa,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAASb,MAChED,EAAeW,KAChB,IACHI,GAEAf,EAAeP,IAU+CgB,MAAOR,IACrE,6BAAMF,GAAeA,EAAYiB,OAAS,GAAKjB,EAAYkB,MAAM,EAAGpB,GAAUqB,KAAI,SAACC,EAASC,GACpF,OAAO,yBAAKC,UAAU,SAASC,IAAKF,EAAKG,QAAS,kBAAM5B,EAAYwB,KAA7D,IAAyEA,EAAzE,SAGf,0BAAME,UAAU,qBAAqBE,QAAS3B,GAA9C,IAAgEF,GAAO,UAAOD,EAAUuB,OAASnB,EAA1B,YAAvE,OCcG2B,EA3CA,WAAO,IAAD,EACiB1B,mBAAS,IAD1B,mBACVL,EADU,KACCgC,EADD,OAEO3B,oBAAS,GAFhB,mBAEV4B,EAFU,KAEJC,EAFI,OAGa7B,oBAAS,GAHtB,mBAGVJ,EAHU,KAGDkC,EAHC,OAIe9B,mBAAS,MAJxB,mBAIV+B,EAJU,KAIAC,EAJA,OAKehC,mBCVX,GDKJ,mBAKVD,EALU,KAKAkC,EALA,KAOjB5B,qBAAU,YACO,uCAAG,8BAAA6B,EAAA,sEACMC,IAAMC,IAAI,aADhB,OACNC,EADM,OAENC,EAAgBD,EAAIE,KAAK5C,UAC/BgC,EAAaW,GACTA,EAAcpB,OAASnB,GACvB+B,GAAW,GALH,2CAAH,qDAQbU,KACD,CAACzC,IAWJ,OACI,yBAAKwB,UAAU,UACf,4BAAKQ,GAEL,yBAAKR,UAAU,uBAAuBE,QAAS,kBAAMI,GAASD,KAC1D,yBAAKL,UAAU,QAAf,sBADJ,IACmD,0CAEnD,yBAAKkB,MAAO,CAACC,WAAYd,EAAO,UAAY,UAAWL,UAAU,OAC7D,kBAAC,EAAD,CAAM5B,UAAWA,EAAWC,QAASA,EAASC,YAjBlC,SAAC0C,GACjBP,EAAYO,IAgBgEzC,eAbzD,WACnBmC,EAAYtC,EAAUuB,QACtBY,GAAW,IAWiG/B,SAAUA,OE/B/G4C,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7fb41251.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\n\nconst List = ({countries, hasMore, handleClick, handleLoadMore, pageSize}) => {\n    const [countryData, setCountryData] = useState([]);\n    const [search, setSearch] = useState('');\n\n    const handleChange = (e) => {\n        const search = e.target.value;\n        setSearch(e.target.value)\n\n        if (search !== ''){\n            const debounced = debounce(() => {\n                const newCountryData = countryData.filter(item => item.includes(search));\n                setCountryData(newCountryData);\n            }, 300);\n            debounced();\n        } else {\n            setCountryData(countries);\n        }\n    }\n\n    useEffect(() => {\n        setCountryData(countries)\n    }, [countries]);\n\n    return (\n        <div>\n            <input type=\"text\" placeholder={`🔍`} onChange={handleChange} value={search}  />\n            <div>{countryData && countryData.length > 0 && countryData.slice(0, pageSize).map((country, idx) => {\n                    return <div className=\"cursor\" key={idx} onClick={() => handleClick(country)}> {country} </div>\n                })}\n            </div>\n            <span className=\"cursor red hasMore\" onClick={handleLoadMore}> {hasMore && `${countries.length - pageSize} more...`} </span>\n        </div>\n    )\n}\n\nList.propTypes = {\n    countries: PropTypes.arrayOf(String),\n    hasMore: PropTypes.bool,\n    handleClick: PropTypes.func,\n    handleLoadMore: PropTypes.func,\n    pageSize: PropTypes.number,\n}\n\nexport default List;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { PAGE_SIZE } from '../constants';\nimport List from './List';\n\nconst Search = () => {\n    const [countries, setCountries] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [hasMore, setHasMore] = useState(false);\n    const [selected, setSelected] = useState(null);\n    const [pageSize, setPageSize] = useState(PAGE_SIZE);\n\n    useEffect(() => {\n        const getData = async function() {\n            const res = await axios.get('./db.json');\n            const countriesData = res.data.countries\n            setCountries(countriesData);\n            if (countriesData.length > pageSize){\n                setHasMore(true);\n            }\n        }\n        getData();\n    }, [pageSize]);\n\n    const handleClick = (data) => {\n        setSelected(data);\n    }\n\n    const handleLoadMore = () => {\n        setPageSize(countries.length)\n        setHasMore(false)\n    }\n\n    return (\n        <div className=\"search\">\n        <h1>{selected}</h1>\n\n        <div className=\"container cursor box\" onClick={() => setOpen(!open)}> \n            <div className=\"item\">Select a location </div> <div> ▼ </div> \n        </div>\n        <div style={{visibility: open ? 'visible' : 'hidden'}} className=\"box\">\n            <List countries={countries} hasMore={hasMore} handleClick={handleClick} handleLoadMore={handleLoadMore} pageSize={pageSize} />\n        </div>\n        \n    </div>\n    )\n}\n\nexport default Search","export const PAGE_SIZE = 5;\n","import React from 'react';\nimport './App.css';\nimport Search from './components/Search';\n\nfunction App() {\n  return (\n    <Search />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}